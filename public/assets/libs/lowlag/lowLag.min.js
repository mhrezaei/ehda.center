if (!window.console) {
    console = {
        log: function () {
        }
    }
}
var lowLag = new function () {
    this.someVariable = undefined;
    this.showNeedInit = function () {
        lowLag.msg("lowLag: you must call lowLag.init() first!")
    };
    this.load = this.showNeedInit;
    this.play = this.showNeedInit;
    this.audioTagTimeToLive = 5000;
    this.sm2url = "sm2/swf/";
    this.soundUrl = "";
    this.debug = "console";
    this.init = function (a) {
        $("#lowLag").remove();
        $("body").append("<div id='lowLag'></div>");
        var b = undefined;
        if (a != undefined) {
            if (a.force != undefined) {
                b = a.force
            }
            if (a.audioTagTimeToLive != undefined) {
                lowLag.audioTagTimeToLive = a.audioTagTimeToLive
            }
            if (a.sm2url != undefined) {
                lowLag.sm2url = a.sm2url
            }
            if (a.urlPrefix != undefined) {
                lowLag.soundUrl = a.urlPrefix
            }
            if (a.debug != undefined) {
                lowLag.debug = a.debug
            }
        }
        var c = "sm2";
        if (b != undefined) {
            c = b
        } else {
            if (typeof(webkitAudioContext) != "undefined") {
                c = "webkitAudio"
            } else {
                if (navigator.userAgent.indexOf("Firefox") != -1) {
                    c = "audioTag"
                }
            }
        }
        switch (c) {
            case"webkitAudio":
                this.msg("init webkitAudio");
                this.load = this.loadSoundWebkitAudio;
                this.play = this.playSoundWebkitAudio;
                this.webkitAudioContext = new webkitAudioContext();
                break;
            case"audioTag":
                this.msg("init audioTag");
                this.load = this.loadSoundAudioTag;
                this.play = this.playSoundAudioTag;
                break;
            case"sm2":
                this.msg("init SoundManager2");
                this.load = this.loadSoundSM2;
                this.play = this.playSoundSM2;
                lowLag.msg("loading SM2 from " + lowLag.sm2url);
                soundManager.setup({
                    url: lowLag.sm2url,
                    useHighPerformance: true,
                    onready: lowLag.sm2Ready,
                    debugMode: true
                });
                break
        }
    };
    this.sm2IsReady = false;
    this.sm2ToLoad = [];
    this.loadSoundSM2 = function (b, a) {
        if (lowLag.sm2IsReady) {
            lowLag.loadSoundSM2ForReals(b, a)
        } else {
            lowLag.sm2ToLoad.push([b, a])
        }
    };
    this.loadSoundSM2ForReals = function (e, d) {
        var a = lowLag.getTagFromURL(e, d);
        lowLag.msg("sm2 loading " + e + " as tag " + a);
        var e = lowLag.getURLArray(e);
        for (var c = 0; c < e.length; c++) {
            var b = lowLag.soundUrl + e[c];
            e[c] = b
        }
        soundManager.createSound({id: a, autoLoad: true, url: e})
    };
    this.sm2Ready = function () {
        lowLag.sm2IsReady = true;
        for (var b = 0; b < lowLag.sm2ToLoad.length; b++) {
            var a = lowLag.sm2ToLoad[b];
            lowLag.loadSoundSM2ForReals(a[0], a[1])
        }
        lowLag.sm2ToLoad = []
    };
    this.playSoundSM2 = function (a) {
        lowLag.msg("playSoundSM2 " + a);
        soundManager.play(a)
    };
    this.getTagFromURL = function (b, a) {
        if (a != undefined) {
            return a
        }
        return lowLag.getSingleURL(b)
    };
    this.getSingleURL = function (a) {
        if (typeof(a) == "string") {
            return a
        }
        return a[0]
    };
    this.getURLArray = function (a) {
        if (typeof(a) == "string") {
            return [a]
        }
        return a
    };
    this.webkitAudioContext = undefined;
    this.webkitAudioBuffers = {};
    this.loadSoundWebkitAudio = function (d, a) {
        var b = lowLag.getSingleURL(d);
        var a = lowLag.getTagFromURL(d, a);
        lowLag.msg("webkitAudio loading " + b + " as tag " + a);
        var c = new XMLHttpRequest();
        c.open("GET", lowLag.soundUrl + b, true);
        c.responseType = "arraybuffer";
        c.onload = function () {
            lowLag.webkitAudioContext.decodeAudioData(c.response, function (e) {
                lowLag.webkitAudioBuffers[a] = e
            }, lowLag.errorLoadWebkitAudtioFile)
        };
        c.send()
    };
    this.errorLoadWebkitAudtioFile = function (a) {
        lowLag.msg("Error loading webkitAudio: " + a)
    };
    this.playSoundWebkitAudio = function (a) {
        lowLag.msg("playSoundWebkitAudio " + a);
        var b = lowLag.webkitAudioBuffers[a];
        var c = lowLag.webkitAudioContext;
        var d = c.createBufferSource();
        d.buffer = b;
        d.connect(c.destination);
        d.noteOn(0)
    };
    this.audioTagID = 0;
    this.audioTagNameToElement = {};
    this.loadSoundAudioTag = function (f, a) {
        var g = "lowLagElem_" + lowLag.audioTagID++;
        var a = lowLag.getTagFromURL(f, a);
        var f = lowLag.getURLArray(f);
        lowLag.audioTagNameToElement[a] = g;
        lowLag.msg("audioTag loading " + f + " as tag " + a);
        var c = "";
        c += '<audio id="' + g + '" preload="auto" autobuffer>';
        for (var d = 0; d < f.length; d++) {
            var b = f[d];
            var e = "audio/" + lowLag.getExtension(b);
            c += '  <source src="' + lowLag.soundUrl + b + '" type="' + e + '" />'
        }
        c += "</audio>";
        $("#lowLag").append(c)
    };
    this.playSoundAudioTag = function (a) {
        lowLag.msg("playSoundAudioTag " + a);
        var d = lowLag.audioTagNameToElement[a];
        var c = "lowLagCloneElem_" + lowLag.audioTagID++;
        $("#" + d).clone().attr("id", c).appendTo("#lowLag");
        var b = document.getElementById(c);
        lowLag.msg(a);
        if (lowLag.audioTagTimeToLive != -1) {
            setTimeout(function () {
                $("#" + c).remove()
            }, lowLag.audioTagTimeToLive)
        }
        b.play()
    };
    this.getExtension = function (a) {
        return a.substring(a.lastIndexOf(".") + 1).toLowerCase()
    };
    this.msg = function (a) {
        a = "-- lowLag " + a;
        if (lowLag.debug == "both" || lowLag.debug == "console") {
            console.log(a + "<br>")
        }
        if (lowLag.debug == "both" || lowLag.debug == "screen") {
            $("#lowLag").append(a + "<br>")
        }
    }
};